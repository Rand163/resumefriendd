/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/src/js/custom/apps/user-management/users/view/add-schedule.js":
/*!*********************************************************************************!*\
  !*** ./resources/src/js/custom/apps/user-management/users/view/add-schedule.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n // Class definition\n\nvar KTUsersAddSchedule = function () {\n  // Shared variables\n  var element = document.getElementById('kt_modal_add_schedule');\n  var form = element.querySelector('#kt_modal_add_schedule_form');\n  var modal = new bootstrap.Modal(element); // Init add schedule modal\n\n  var initAddSchedule = function initAddSchedule() {\n    // Init flatpickr -- for more info: https://flatpickr.js.org/\n    $(\"#kt_modal_add_schedule_datepicker\").flatpickr({\n      enableTime: true,\n      dateFormat: \"Y-m-d H:i\"\n    }); // Init tagify -- for more info: https://yaireo.github.io/tagify/\n\n    var tagifyInput = form.querySelector('#kt_modal_add_schedule_tagify');\n    new Tagify(tagifyInput, {\n      whitelist: [\"sean@dellito.com\", \"brian@exchange.com\", \"mikaela@pexcom.com\", \"f.mitcham@kpmg.com.au\", \"olivia@corpmail.com\", \"owen.neil@gmail.com\", \"dam@consilting.com\", \"emma@intenso.com\", \"ana.cf@limtel.com\", \"robert@benko.com\", \"lucy.m@fentech.com\", \"ethan@loop.com.au\"],\n      maxTags: 10,\n      dropdown: {\n        maxItems: 20,\n        // <- mixumum allowed rendered suggestions\n        classname: \"tagify__inline__suggestions\",\n        // <- custom classname for this dropdown, so it could be targeted\n        enabled: 0,\n        // <- show suggestions on focus\n        closeOnSelect: false // <- do not hide the suggestions dropdown once an item has been selected\n\n      }\n    }); // Init form validation rules. For more info check the FormValidation plugin's official documentation:https://formvalidation.io/\n\n    var validator = FormValidation.formValidation(form, {\n      fields: {\n        'event_datetime': {\n          validators: {\n            notEmpty: {\n              message: 'Event date & time is required'\n            }\n          }\n        },\n        'event_name': {\n          validators: {\n            notEmpty: {\n              message: 'Event name is required'\n            }\n          }\n        },\n        'event_org': {\n          validators: {\n            notEmpty: {\n              message: 'Event organiser is required'\n            }\n          }\n        },\n        'event_invitees': {\n          validators: {\n            notEmpty: {\n              message: 'Event invitees is required'\n            }\n          }\n        }\n      },\n      plugins: {\n        trigger: new FormValidation.plugins.Trigger(),\n        bootstrap: new FormValidation.plugins.Bootstrap5({\n          rowSelector: '.fv-row',\n          eleInvalidClass: '',\n          eleValidClass: ''\n        })\n      }\n    }); // Revalidate country field. For more info, plase visit the official plugin site: https://select2.org/\n\n    $(form.querySelector('[name=\"event_invitees\"]')).on('change', function () {\n      // Revalidate the field when an option is chosen\n      validator.revalidateField('event_invitees');\n    }); // Close button handler\n\n    var closeButton = element.querySelector('[data-kt-users-modal-action=\"close\"]');\n    closeButton.addEventListener('click', function (e) {\n      e.preventDefault();\n      Swal.fire({\n        text: \"Are you sure you would like to cancel?\",\n        icon: \"warning\",\n        showCancelButton: true,\n        buttonsStyling: false,\n        confirmButtonText: \"Yes, cancel it!\",\n        cancelButtonText: \"No, return\",\n        customClass: {\n          confirmButton: \"btn btn-primary\",\n          cancelButton: \"btn btn-active-light\"\n        }\n      }).then(function (result) {\n        if (result.value) {\n          form.reset(); // Reset form\t\n\n          modal.hide(); // Hide modal\t\t\t\t\n        } else if (result.dismiss === 'cancel') {\n          Swal.fire({\n            text: \"Your form has not been cancelled!.\",\n            icon: \"error\",\n            buttonsStyling: false,\n            confirmButtonText: \"Ok, got it!\",\n            customClass: {\n              confirmButton: \"btn btn-primary\"\n            }\n          });\n        }\n      });\n    }); // Cancel button handler\n\n    var cancelButton = element.querySelector('[data-kt-users-modal-action=\"cancel\"]');\n    cancelButton.addEventListener('click', function (e) {\n      e.preventDefault();\n      Swal.fire({\n        text: \"Are you sure you would like to cancel?\",\n        icon: \"warning\",\n        showCancelButton: true,\n        buttonsStyling: false,\n        confirmButtonText: \"Yes, cancel it!\",\n        cancelButtonText: \"No, return\",\n        customClass: {\n          confirmButton: \"btn btn-primary\",\n          cancelButton: \"btn btn-active-light\"\n        }\n      }).then(function (result) {\n        if (result.value) {\n          form.reset(); // Reset form\t\n\n          modal.hide(); // Hide modal\t\t\t\t\n        } else if (result.dismiss === 'cancel') {\n          Swal.fire({\n            text: \"Your form has not been cancelled!.\",\n            icon: \"error\",\n            buttonsStyling: false,\n            confirmButtonText: \"Ok, got it!\",\n            customClass: {\n              confirmButton: \"btn btn-primary\"\n            }\n          });\n        }\n      });\n    }); // Submit button handler\n\n    var submitButton = element.querySelector('[data-kt-users-modal-action=\"submit\"]');\n    submitButton.addEventListener('click', function (e) {\n      // Prevent default button action\n      e.preventDefault(); // Validate form before submit\n\n      if (validator) {\n        validator.validate().then(function (status) {\n          console.log('validated!');\n\n          if (status == 'Valid') {\n            // Show loading indication\n            submitButton.setAttribute('data-kt-indicator', 'on'); // Disable button to avoid multiple click \n\n            submitButton.disabled = true; // Simulate form submission. For more info check the plugin's official documentation: https://sweetalert2.github.io/\n\n            setTimeout(function () {\n              // Remove loading indication\n              submitButton.removeAttribute('data-kt-indicator'); // Enable button\n\n              submitButton.disabled = false; // Show popup confirmation \n\n              Swal.fire({\n                text: \"Form has been successfully submitted!\",\n                icon: \"success\",\n                buttonsStyling: false,\n                confirmButtonText: \"Ok, got it!\",\n                customClass: {\n                  confirmButton: \"btn btn-primary\"\n                }\n              }).then(function (result) {\n                if (result.isConfirmed) {\n                  modal.hide();\n                }\n              }); //form.submit(); // Submit form\n            }, 2000);\n          } else {\n            // Show popup warning. For more info check the plugin's official documentation: https://sweetalert2.github.io/\n            Swal.fire({\n              text: \"Sorry, looks like there are some errors detected, please try again.\",\n              icon: \"error\",\n              buttonsStyling: false,\n              confirmButtonText: \"Ok, got it!\",\n              customClass: {\n                confirmButton: \"btn btn-primary\"\n              }\n            });\n          }\n        });\n      }\n    });\n  };\n\n  return {\n    // Public functions\n    init: function init() {\n      initAddSchedule();\n    }\n  };\n}(); // On document ready\n\n\nKTUtil.onDOMContentLoaded(function () {\n  KTUsersAddSchedule.init();\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/src/js/custom/apps/user-management/users/view/add-schedule.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./resources/src/js/custom/apps/user-management/users/view/add-schedule.js"](0, __webpack_exports__, __webpack_require__);
/******/ 	
/******/ })()
;